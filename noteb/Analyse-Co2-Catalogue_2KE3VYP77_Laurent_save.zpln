{
  "paragraphs": [
    {
      "text": "%pyspark\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as F\nfrom pyspark.sql.functions import avg, when, trim, split, regexp_replace, round, lower, col\n\nspark = SparkSession.builder\\\n    .appName(\"AggregateCatalogueCo2\") \\\n    .config('hive.metastore.warehouse.dir', '/user/hive/warehouse') \\\n    .config('hive.metastore.uris', 'thrift://hive-metastore:9083') \\\n    .enableHiveSupport()\\\n    .getOrCreate()",
      "user": "anonymous",
      "dateUpdated": "2024-11-12T15:49:04+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1731423352872_1264454946",
      "id": "paragraph_1731423352872_1264454946",
      "dateCreated": "2024-11-12T14:55:52+0000",
      "dateStarted": "2024-11-12T15:49:04+0000",
      "dateFinished": "2024-11-12T15:49:04+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:1435"
    },
    {
      "title": "Import  catalogue",
      "text": "%pyspark\nspark.sparkContext.setLogLevel(\"OFF\")\nspark.catalog.clearCache()\nspark.sql(\"USE concessionnaire\")\n\ndf_catalogue = spark.sql(\"SELECT * FROM catalogue_ext\")\ndf_co2 = spark.sql(\"SELECT * FROM crit_air_ext\")",
      "user": "anonymous",
      "dateUpdated": "2024-11-12T15:49:04+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1731423663605_176002507",
      "id": "paragraph_1731423663605_176002507",
      "dateCreated": "2024-11-12T15:01:03+0000",
      "dateStarted": "2024-11-12T15:49:04+0000",
      "dateFinished": "2024-11-12T15:49:05+0000",
      "status": "FINISHED",
      "$$hashKey": "object:1436"
    },
    {
      "text": "%pyspark\ndf_catalogue = spark.sql(\"SELECT * FROM catalogue_ext\")\ndf_co2 = spark.sql(\"SELECT * FROM crit_air_ext\")",
      "user": "anonymous",
      "dateUpdated": "2024-11-12T15:49:05+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1731423785629_132540451",
      "id": "paragraph_1731423785629_132540451",
      "dateCreated": "2024-11-12T15:03:05+0000",
      "dateStarted": "2024-11-12T15:49:05+0000",
      "dateFinished": "2024-11-12T15:49:05+0000",
      "status": "FINISHED",
      "$$hashKey": "object:1437"
    },
    {
      "text": "%pyspark\ndf_catalogue.show()\n",
      "user": "anonymous",
      "dateUpdated": "2024-11-12T15:49:05+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://55fdd90afffb:4040/jobs/job?id=13",
              "$$hashKey": "object:2351"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1731424000029_1950974330",
      "id": "paragraph_1731424000029_1950974330",
      "dateCreated": "2024-11-12T15:06:40+0000",
      "dateStarted": "2024-11-12T15:49:05+0000",
      "dateFinished": "2024-11-12T15:49:07+0000",
      "status": "FINISHED",
      "$$hashKey": "object:1438",
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+----------+--------------+---------+-----------+--------+--------+-------+--------+-------+\n|    marque|           nom|puissance|   longueur|nbplaces|nbportes|couleur|occasion|   prix|\n+----------+--------------+---------+-----------+--------+--------+-------+--------+-------+\n|    marque|           nom|     null|   longueur|    null|    null|couleur|    null|   null|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|  blanc|   false|50500.0|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|   noir|   false|50500.0|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|  rouge|   false|50500.0|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|   gris|    true|35350.0|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|   bleu|    true|35350.0|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|   gris|   false|50500.0|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|   bleu|   false|50500.0|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|  rouge|    true|35350.0|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|  blanc|    true|35350.0|\n|     Volvo|        S80 T6|      272|tr�s longue|       5|       5|   noir|    true|35350.0|\n|Volkswagen|Touran 2.0 FSI|      150|     longue|       7|       5|  rouge|   false|27340.0|\n|Volkswagen|Touran 2.0 FSI|      150|     longue|       7|       5|   gris|    true|19138.0|\n|Volkswagen|Touran 2.0 FSI|      150|     longue|       7|       5|   bleu|    true|19138.0|\n|Volkswagen|Touran 2.0 FSI|      150|     longue|       7|       5|   gris|   false|27340.0|\n|Volkswagen|Touran 2.0 FSI|      150|     longue|       7|       5|   bleu|   false|27340.0|\n|Volkswagen|Touran 2.0 FSI|      150|     longue|       7|       5|  blanc|    true|19138.0|\n|Volkswagen|Touran 2.0 FSI|      150|     longue|       7|       5|   noir|    true|19138.0|\n|Volkswagen|Touran 2.0 FSI|      150|     longue|       7|       5|  rouge|    true|19138.0|\n|Volkswagen|Touran 2.0 FSI|      150|     longue|       7|       5|  blanc|   false|27340.0|\n+----------+--------------+---------+-----------+--------+--------+-------+--------+-------+\nonly showing top 20 rows\n\n"
          }
        ]
      }
    },
    {
      "text": "%pyspark\ndf_co2 = df_co2.withColumn(\"marque\", split(df_co2[\"marque_modele\"], \" \", 2).getItem(0))\ndf_co2 = df_co2.withColumn(\"modele\", split(df_co2[\"marque_modele\"], \" \", 2).getItem(1))\ndf_co2 = df_co2.drop('marque_modele')\n",
      "user": "anonymous",
      "dateUpdated": "2024-11-12T15:49:07+0000",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1731424289856_456957682",
      "id": "paragraph_1731424289856_456957682",
      "dateCreated": "2024-11-12T15:11:29+0000",
      "dateStarted": "2024-11-12T15:49:07+0000",
      "dateFinished": "2024-11-12T15:49:07+0000",
      "status": "FINISHED",
      "$$hashKey": "object:1439"
    },
    {
      "text": "%pyspark\ndf_co2.show()",
      "user": "anonymous",
      "dateUpdated": "2024-11-12T15:49:07+0000",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-----------+----------+------------+----------+--------------------+\n|bonus_malus|rejets_co2|cout_energie|    marque|              modele|\n+-----------+----------+------------+----------+--------------------+\n|          -|      31.0|        85 €|     SKODA|SUPERB Combi PHEV...|\n|    +8 753€|     200.0|       799 €|  MERCEDES|SPRINTER Combi 31...|\n|          -|      69.0|        78 €|      LAND|ROVER RANGE ROVER...|\n|          -|      39.0|        75 €|  MERCEDES|             C 300 e|\n|          -|      31.0|        56 €|VOLKSWAGEN|Passat 1.4 TSI + ...|\n|          -|      48.0|        75 €|     VOLVO|S60 T8 TWIN ENGIN...|\n|    +8 753€|     200.0|       810 €|    NISSAN|NV400 COMBI 3T3 8...|\n|          -|      40.0|        98 €|MITSUBISHI|OUTLANDER PHEV IN...|\n|  -6 000€ 1|       0.0|       356 €|      AUDI|E-TRON SPORTBACK ...|\n|  -6 000€ 1|       0.0|       206 €|   RENAULT|          ZOE (53Kw)|\n|    +8 753€|     262.0|       999 €|  MERCEDES|SPRINTER Combi 31...|\n|  -6 000€ 1|       0.0|       213 €|     SMART|EQ FORFOUR 22 kW ...|\n|  -6 000€ 1|       0.0|       247 €|     TESLA|     MODEL S (169Kw)|\n|    +8 753€|     255.0|       988 €|  MERCEDES|SPRINTER Combi 31...|\n|  -6 000€ 1|       0.0|       199 €|      MINI|MINI Cooper SE Ha...|\n|          -|      31.0|        56 €|VOLKSWAGEN|Passat 1.4 TSI + ...|\n|  -6 000€ 1|       0.0|       241 €|   PEUGEOT|ION electrique (6...|\n|          -|      31.0|        85 €|     SKODA|SUPERB Combi PHEV...|\n|          -|      69.0|        78 €|      LAND|ROVER RANGE ROVER...|\n|  -6 000€ 1|       0.0|       201 €|     SMART|EQ FORTWO COUPE 2...|\n+-----------+----------+------------+----------+--------------------+\nonly showing top 20 rows\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://55fdd90afffb:4040/jobs/job?id=14",
              "$$hashKey": "object:2393"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1731424290117_658861203",
      "id": "paragraph_1731424290117_658861203",
      "dateCreated": "2024-11-12T15:11:30+0000",
      "dateStarted": "2024-11-12T15:49:07+0000",
      "dateFinished": "2024-11-12T15:49:53+0000",
      "status": "FINISHED",
      "$$hashKey": "object:1440"
    },
    {
      "text": "%pyspark\n\n# Faire la jointure en ajoutant une colonne indicatrice de correspondance\ndf_joined_check = df_catalogue.join(df_co2, on=[\"marque\"], how=\"left\") \\\n    .withColumn(\"has_match\", F.when(F.col(df_co2['marque']).isNotNull(), 1).otherwise(0))\n\ndf_joigned_check.count()\n\n",
      "user": "anonymous",
      "dateUpdated": "2024-11-12T15:49:53+0000",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        }
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)\n\u001b[0;32m/tmp/ipykernel_297/1500680113.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Faire la jointure en ajoutant une colonne indicatrice de correspondance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mdf_joined_check\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_catalogue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_co2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"marque\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"left\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0;34m.\u001b[0m\u001b[0mwithColumn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"has_match\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwhen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_co2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'marque'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misNotNull\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0motherwise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf_joigned_check\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/spark/python/lib/pyspark.zip/pyspark/sql/functions.py\u001b[0m in \u001b[0;36mcol\u001b[0;34m(col)\u001b[0m\n\u001b[1;32m    104\u001b[0m     \u001b[0mReturns\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;32mclass\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m~\u001b[0m\u001b[0mpyspark\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msql\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mColumn\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0mbased\u001b[0m \u001b[0mon\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mgiven\u001b[0m \u001b[0mcolumn\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;31m'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m     \"\"\"\n\u001b[0;32m--> 106\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_invoke_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"col\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/spark/python/lib/pyspark.zip/pyspark/sql/functions.py\u001b[0m in \u001b[0;36m_invoke_function\u001b[0;34m(name, *args)\u001b[0m\n\u001b[1;32m     56\u001b[0m     \"\"\"\n\u001b[1;32m     57\u001b[0m     \u001b[0mjf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_get_get_jvm_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSparkContext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_active_spark_context\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mColumn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mjf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1294\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1295\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1296\u001b[0;31m         \u001b[0margs_command\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtemp_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_build_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1297\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1298\u001b[0m         \u001b[0mcommand\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mCALL_COMMAND_NAME\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m_build_args\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_build_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverters\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverters\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1260\u001b[0;31m             \u001b[0;34m(\u001b[0m\u001b[0mnew_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1261\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1262\u001b[0m             \u001b[0mnew_args\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m_get_args\u001b[0;34m(self, args)\u001b[0m\n\u001b[1;32m   1245\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0mconverter\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverters\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1246\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mconverter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcan_convert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1247\u001b[0;31m                         \u001b[0mtemp_arg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconverter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconvert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1248\u001b[0m                         \u001b[0mtemp_args\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp_arg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1249\u001b[0m                         \u001b[0mnew_args\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp_arg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/spark/python/lib/py4j-0.10.9-src.zip/py4j/java_collections.py\u001b[0m in \u001b[0;36mconvert\u001b[0;34m(self, object, gateway_client)\u001b[0m\n\u001b[1;32m    508\u001b[0m         \u001b[0mArrayList\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mJavaClass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"java.util.ArrayList\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgateway_client\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    509\u001b[0m         \u001b[0mjava_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mArrayList\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 510\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0melement\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    511\u001b[0m             \u001b[0mjava_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0melement\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    512\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mjava_list\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/spark/python/lib/pyspark.zip/pyspark/sql/column.py\u001b[0m in \u001b[0;36m__iter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    458\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__iter__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 460\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Column is not iterable\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    461\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    462\u001b[0m     \u001b[0;31m# string methods\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mTypeError\u001b[0m: Column is not iterable"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1731424290378_1917816062",
      "id": "paragraph_1731424290378_1917816062",
      "dateCreated": "2024-11-12T15:11:30+0000",
      "dateStarted": "2024-11-12T15:49:53+0000",
      "dateFinished": "2024-11-12T15:49:54+0000",
      "status": "ERROR",
      "$$hashKey": "object:1441"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2024-11-12T15:13:29+0000",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "results": {},
        "enabled": true,
        "editorSetting": {}
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1731424290620_1380668737",
      "id": "paragraph_1731424290620_1380668737",
      "dateCreated": "2024-11-12T15:11:30+0000",
      "dateStarted": "2024-11-12T15:13:29+0000",
      "dateFinished": "2024-11-12T15:13:29+0000",
      "status": "FINISHED",
      "$$hashKey": "object:1442"
    }
  ],
  "name": "Analyse-Co2-Catalogue",
  "id": "2KE3VYP77",
  "defaultInterpreterGroup": "spark",
  "version": "0.10.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {
    "isRunning": true
  },
  "path": "/Analyse-Co2-Catalogue"
}